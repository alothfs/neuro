# -*- coding: utf-8 -*-
"""neuro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VNZxT9mqojj7SqeRqlzl0-AEn0Bj9zIA
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from PIL import Image
from datetime import datetime, timedelta
import random
from sklearn.cluster import KMeans
import time

# Set page configuration
st.set_page_config(
    page_title="neuro",
    page_icon="💰",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Define Revolut-like color scheme
PRIMARY_COLOR = "#7B61FF"  # Purple
SECONDARY_COLOR = "#F2F2F2"  # Light Gray
ACCENT_COLOR = "#00D37F"  # Green
TEXT_COLOR = "#333333"  # Dark Gray
LIGHT_TEXT = "#FFFFFF"  # White

# Apply custom CSS
st.markdown(f"""
<style>
    .main .block-container {{
        padding-top: 1rem;
        padding-bottom: 1rem;
    }}
    h1, h2, h3, h4, h5, h6 {{
        color: {TEXT_COLOR};
        font-weight: 600;
    }}
    .stButton>button {{
        background-color: {PRIMARY_COLOR};
        color: {LIGHT_TEXT};
        border-radius: 5px;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: 500;
    }}
    .stButton>button:hover {{
        background-color: {PRIMARY_COLOR}CC;
    }}
    .highlight-card {{
        background-color: {PRIMARY_COLOR};
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
    }}
    .secondary-card {{
        background-color: {SECONDARY_COLOR};
        padding: 1.5rem;
        border-radius: 10px;
    }}
    .css-1d391kg {{
        background-color: {PRIMARY_COLOR};
    }}
    .subscription-card {{
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        border: 1px solid #e0e0e0;
    }}
    .basic-card {{ background-color: #f8f9fa; }}
    .pro-card {{ background-color: #e8eaf6; }}
    .elite-card {{ background-color: #e3f2fd; }}

    /* Custom CSS for rounded buttons */
    .rounded-button {{
        background-color: #f0f0f0;
        border-radius: 20px;
        padding: 10px 15px;
        margin: 5px;
        display: inline-block;
        text-align: center;
        cursor: pointer;
    }}

    /* Custom progress bar */
    .progress-container {{
        width: 100%;
        background-color: #e0e0e0;
        border-radius: 5px;
        margin-bottom: 10px;
    }}
    .progress-bar {{
        height: 10px;
        border-radius: 5px;
        text-align: center;
    }}
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'login_status' not in st.session_state:
    st.session_state.login_status = False
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'login'
if 'subscription' not in st.session_state:
    st.session_state.subscription = 'Basic'  # Default subscription
if 'balance' not in st.session_state:
    st.session_state.balance = 1500.0
if 'savings' not in st.session_state:
    st.session_state.savings = 450.0
if 'investments' not in st.session_state:
    st.session_state.investments = 750.0
if 'goals' not in st.session_state:
    st.session_state.goals = [
        {"name": "Emergency Fund", "target": 5000, "current": 1200, "date": "2023-12-31"},
        {"name": "Vacation", "target": 3000, "current": 500, "date": "2023-09-30"}
    ]
if 'transactions' not in st.session_state:
    # Generate some sample transactions
    categories = ["Groceries", "Dining", "Entertainment", "Transport", "Shopping", "Utilities", "Income"]
    amounts = [random.uniform(5, 200) for _ in range(30)]
    dates = [(datetime.now() - timedelta(days=random.randint(0, 30))).strftime("%Y-%m-%d") for _ in range(30)]

    st.session_state.transactions = pd.DataFrame({
        "date": dates,
        "category": [random.choice(categories) for _ in range(30)],
        "amount": amounts,
        "description": [f"Transaction {i+1}" for i in range(30)]
    })
    st.session_state.transactions["type"] = ["expense" if cat != "Income" else "income" for cat in st.session_state.transactions["category"]]
    st.session_state.transactions["amount"] = [
        -amt if cat != "Income" else amt
        for amt, cat in zip(st.session_state.transactions["amount"], st.session_state.transactions["category"])
    ]
if 'insights' not in st.session_state:
    st.session_state.insights = [
        "You spent 15% more on dining this month compared to last month.",
        "Based on your spending patterns, you can safely save €100 more each month.",
        "Your emergency fund is 40% complete. Keep it up!"
    ]
if 'roundups' not in st.session_state:
    st.session_state.roundups = 12.75  # Amount accumulated from round-ups

# Navigation function
def navigate_to(page):
    st.session_state.current_page = page

# Authentication functions
def login():
    st.markdown("<h1 style='text-align: center;'>neuro</h1>", unsafe_allow_html=True)
    st.markdown("<p style='text-align: center; font-size: 18px;'>Your AI-powered financial companion</p>", unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown("<div style='padding: 2rem; background-color: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>", unsafe_allow_html=True)
        username = st.text_input("Email or Username")
        password = st.text_input("Password", type="password")

        if st.button("Login"):
            if username and password:  # Simple validation
                st.session_state.login_status = True
                st.session_state.current_page = 'dashboard'
                st.rerun()
            else:
                st.error("Please enter both username and password")

        st.markdown("<div style='text-align: center; margin-top: 1rem;'>", unsafe_allow_html=True)
        st.markdown("<a href='#' style='color: #7B61FF; text-decoration: none;'>Forgot password?</a>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

        st.markdown("<div style='text-align: center; margin-top: 1rem;'>", unsafe_allow_html=True)
        st.markdown("Don't have an account? <a href='#' style='color: #7B61FF; text-decoration: none;'>Sign up</a>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

# Dashboard components
def display_dashboard():
    st.markdown("<h2>Dashboard</h2>", unsafe_allow_html=True)

    # Top cards section
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown(f"""
        <div class="highlight-card">
            <h4 style="margin-top: 0;">Total Balance</h4>
            <h2 style="margin: 0;">€{st.session_state.balance:.2f}</h2>
            <p>Available funds</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown(f"""
        <div class="secondary-card">
            <h4 style="margin-top: 0;">Savings</h4>
            <h2 style="margin: 0;">€{st.session_state.savings:.2f}</h2>
            <p>Growing at 3.5% APY</p>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
        <div class="secondary-card">
            <h4 style="margin-top: 0;">Investments</h4>
            <h2 style="margin: 0;">€{st.session_state.investments:.2f}</h2>
            <p>+5.2% this month</p>
        </div>
        """, unsafe_allow_html=True)

    # Round-up savings feature
    st.markdown("<h3>Round-up Savings</h3>", unsafe_allow_html=True)
    col1, col2 = st.columns([2, 1])

    with col1:
        st.markdown(f"""
        <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px;">
            <h4 style="margin-top: 0;">Round-up Savings</h4>
            <p>We round up your transactions and save the difference.</p>
            <div class="progress-container">
                <div class="progress-bar" style="width: 65%; background-color: {PRIMARY_COLOR}"></div>
            </div>
            <p>€{st.session_state.roundups:.2f} saved this month through round-ups</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("<div style='height: 100%; display: flex; align-items: center; justify-content: center;'>", unsafe_allow_html=True)
        if st.button("Boost Round-up"):
            st.session_state.roundups += 5.0
            st.rerun()
        st.markdown("</div>", unsafe_allow_html=True)

    # Recent transactions and spending analysis
    col1, col2 = st.columns([3, 2])

    with col1:
        st.markdown("<h3>Recent Transactions</h3>", unsafe_allow_html=True)
        recent_transactions = st.session_state.transactions.sort_values(by="date", ascending=False).head(5)

        for _, tx in recent_transactions.iterrows():
            sign = "+" if tx["amount"] > 0 else "-"
            color = ACCENT_COLOR if tx["amount"] > 0 else TEXT_COLOR

            st.markdown(f"""
            <div style="padding: 0.75rem; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between;">
                <div>
                    <p style="margin: 0; font-weight: 500;">{tx["description"]}</p>
                    <p style="margin: 0; color: gray; font-size: 0.8rem;">{tx["date"]} • {tx["category"]}</p>
                </div>
                <div>
                    <p style="margin: 0; font-weight: 500; color: {color};">{sign}€{abs(tx["amount"]):.2f}</p>
                </div>
            </div>
            """, unsafe_allow_html=True)

        if st.button("See All Transactions"):
            navigate_to("transactions")
            st.rerun()

    with col2:
        st.markdown("<h3>Spending Analysis</h3>", unsafe_allow_html=True)

        # Prepare data for the chart
        expense_data = st.session_state.transactions[st.session_state.transactions["type"] == "expense"]
        category_spending = expense_data.groupby("category")["amount"].sum().abs().reset_index()

        fig = px.pie(
            category_spending,
            values="amount",
            names="category",
            hole=0.4,
            color_discrete_sequence=px.colors.sequential.Purples_r
        )
        fig.update_layout(margin=dict(t=0, b=0, l=20, r=20), height=300)
        st.plotly_chart(fig, use_container_width=True)

    # AI Insights
    st.markdown("<h3>AI Financial Insights</h3>", unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)

    for i, (col, insight) in enumerate(zip([col1, col2, col3], st.session_state.insights)):
        with col:
            st.markdown(f"""
            <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px; height: 100%;">
                <p style="margin: 0;">{insight}</p>
            </div>
            """, unsafe_allow_html=True)

    # Financial Goals
    st.markdown("<h3>Financial Goals</h3>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    for i, goal in enumerate(st.session_state.goals):
        progress = (goal["current"] / goal["target"]) * 100
        with col1 if i % 2 == 0 else col2:
            st.markdown(f"""
            <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px; margin-bottom: 1rem;">
                <h4 style="margin-top: 0;">{goal["name"]}</h4>
                <div class="progress-container">
                    <div class="progress-bar" style="width: {progress}%; background-color: {PRIMARY_COLOR}"></div>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>€{goal["current"]:.0f}</span>
                    <span>€{goal["target"]:.0f}</span>
                </div>
                <p style="margin-top: 0.5rem; font-size: 0.9rem;">Target date: {goal["date"]}</p>
            </div>
            """, unsafe_allow_html=True)

    if st.button("Add New Goal"):
        navigate_to("goals")
        st.rerun()

# Savings and Investments components
def display_savings():
    st.markdown("<h2>Savings & Investments</h2>", unsafe_allow_html=True)

    tab1, tab2 = st.tabs(["Savings", "Investments"])

    with tab1:
        col1, col2 = st.columns([2, 1])

        with col1:
            st.markdown(f"""
            <div class="highlight-card">
                <h4 style="margin-top: 0;">Total Savings</h4>
                <h2 style="margin: 0;">€{st.session_state.savings:.2f}</h2>
                <p>Growing at 3.5% APY</p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("<h3>Savings Growth</h3>", unsafe_allow_html=True)

            # Generate sample data for savings growth
            dates = pd.date_range(end=datetime.now(), periods=12, freq='M')
            savings_values = [st.session_state.savings * (1 - 0.05 * (12 - i) / 12) for i in range(12)]

            savings_df = pd.DataFrame({
                'date': dates,
                'amount': savings_values
            })

            fig = px.line(
                savings_df,
                x='date',
                y='amount',
                line_shape='spline',
                labels={'date': '', 'amount': 'Savings (€)'},
                color_discrete_sequence=[PRIMARY_COLOR]
            )
            fig.update_layout(margin=dict(t=0, b=0, l=20, r=20))
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.markdown("<h3>Automated Savings</h3>", unsafe_allow_html=True)

            auto_save_amount = st.number_input("Auto-save amount (€ / month)", min_value=0.0, value=100.0, step=25.0)

            st.markdown("<h4>Round-up Settings</h4>", unsafe_allow_html=True)

            roundup_multiplier = st.select_slider(
                "Round-up multiplier",
                options=[1, 2, 3, 5, 10],
                value=1
            )

            if st.button("Save Settings"):
                st.success("Savings settings updated successfully!")

            st.markdown(f"""
            <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px; margin-top: 1rem;">
                <h4 style="margin-top: 0;">Current Round-ups</h4>
                <h3 style="margin: 0;">€{st.session_state.roundups:.2f}</h3>
                <p>Saved this month</p>
            </div>
            """, unsafe_allow_html=True)

    with tab2:
        if st.session_state.subscription in ['Pro', 'Elite']:
            col1, col2 = st.columns([2, 1])

            with col1:
                st.markdown(f"""
                <div class="highlight-card">
                    <h4 style="margin-top: 0;">Total Investments</h4>
                    <h2 style="margin: 0;">€{st.session_state.investments:.2f}</h2>
                    <p>+5.2% this month</p>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("<h3>Investment Performance</h3>", unsafe_allow_html=True)

                # Generate sample data for investment performance
                dates = pd.date_range(end=datetime.now(), periods=12, freq='M')
                investment_values = [st.session_state.investments * (1 - 0.08 * (12 - i) / 12) for i in range(12)]
                benchmark_values = [st.session_state.investments * 0.9 * (1 - 0.07 * (12 - i) / 12) for i in range(12)]

                perf_df = pd.DataFrame({
                    'date': dates,
                    'Your Portfolio': investment_values,
                    'Benchmark': benchmark_values
                })

                perf_df_melted = pd.melt(perf_df, id_vars=['date'], value_vars=['Your Portfolio', 'Benchmark'])

                fig = px.line(
                    perf_df_melted,
                    x='date',
                    y='value',
                    color='variable',
                    line_shape='spline',
                    labels={'date': '', 'value': 'Value (€)', 'variable': ''},
                    color_discrete_sequence=[PRIMARY_COLOR, '#AAAAAA']
                )
                fig.update_layout(margin=dict(t=0, b=0, l=20, r=20))
                st.plotly_chart(fig, use_container_width=True)

            with col2:
                st.markdown("<h3>AI Investment Suggestions</h3>", unsafe_allow_html=True)

                st.markdown("""
                <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px; margin-bottom: 1rem;">
                    <h4 style="margin-top: 0;">Suggested ETF</h4>
                    <p style="margin: 0; font-weight: 500;">Vanguard FTSE All-World</p>
                    <p style="margin: 0; color: green;">+7.2% YTD</p>
                    <p style="margin-top: 0.5rem; font-size: 0.9rem;">Global diversification with low fees</p>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("""
                <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px; margin-bottom: 1rem;">
                    <h4 style="margin-top: 0;">Portfolio Suggestion</h4>
                    <p style="margin: 0;">Based on your risk profile:</p>
                    <ul style="margin-top: 0.5rem;">
                        <li>70% Global Equities</li>
                        <li>20% Bonds</li>
                        <li>10% Alternatives</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

                if st.button("Get Custom Investment Plan"):
                    st.info("Our AI is preparing your custom investment plan...")
                    with st.spinner("Analyzing market conditions..."):
                        time.sleep(2)
                    st.success("Your custom investment plan is ready!")

        else:
            st.warning("Upgrade to Pro or Elite to access AI-driven investment suggestions and portfolio management.")
            if st.button("Upgrade Subscription"):
                navigate_to("subscription")
                st.rerun()

# Transactions and analysis components
def display_transactions():
    st.markdown("<h2>Transactions & Analysis</h2>", unsafe_allow_html=True)

    tab1, tab2 = st.tabs(["Transactions", "Cash Flow Analysis"])

    with tab1:
        # Transaction filters
        col1, col2, col3 = st.columns(3)

        with col1:
            filter_category = st.selectbox("Category", ["All"] + list(st.session_state.transactions["category"].unique()))

        with col2:
            filter_date_range = st.date_input(
                "Date Range",
                value=(
                    datetime.now() - timedelta(days=30),
                    datetime.now()
                )
            )

        with col3:
            filter_type = st.selectbox("Type", ["All", "Income", "Expense"])

        # Apply filters
        filtered_transactions = st.session_state.transactions.copy()

        if filter_category != "All":
            filtered_transactions = filtered_transactions[filtered_transactions["category"] == filter_category]

        if len(filter_date_range) == 2:
            start_date, end_date = filter_date_range
            filtered_transactions = filtered_transactions[
                (pd.to_datetime(filtered_transactions["date"]) >= pd.to_datetime(start_date)) &
                (pd.to_datetime(filtered_transactions["date"]) <= pd.to_datetime(end_date))
            ]

        if filter_type != "All":
            transaction_type = "income" if filter_type == "Income" else "expense"
            filtered_transactions = filtered_transactions[filtered_transactions["type"] == transaction_type]

        # Display transactions
        if not filtered_transactions.empty:
            st.markdown("<h3>Transaction List</h3>", unsafe_allow_html=True)

            for _, tx in filtered_transactions.sort_values(by="date", ascending=False).iterrows():
                sign = "+" if tx["amount"] > 0 else "-"
                color = ACCENT_COLOR if tx["amount"] > 0 else TEXT_COLOR

                st.markdown(f"""
                <div style="padding: 0.75rem; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between;">
                    <div>
                        <p style="margin: 0; font-weight: 500;">{tx["description"]}</p>
                        <p style="margin: 0; color: gray; font-size: 0.8rem;">{tx["date"]} • {tx["category"]}</p>
                    </div>
                    <div>
                        <p style="margin: 0; font-weight: 500; color: {color};">{sign}€{abs(tx["amount"]):.2f}</p>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("No transactions found matching your filters.")

    with tab2:
        if st.session_state.subscription in ['Pro', 'Elite']:
            st.markdown("<h3>Monthly Cash Flow</h3>", unsafe_allow_html=True)

            # Generate sample data for cash flow
            dates = pd.date_range(end=datetime.now(), periods=6, freq='M')
            income_values = [random.uniform(2000, 2500) for _ in range(6)]
            expense_values = [random.uniform(1500, 2000) for _ in range(6)]

            cash_flow_df = pd.DataFrame({
                'month': dates.strftime('%b %Y'),
                'Income': income_values,
                'Expenses': [-exp for exp in expense_values]
            })

            cash_flow_df_melted = pd.melt(
                cash_flow_df,
                id_vars=['month'],
                value_vars=['Income', 'Expenses'],
                var_name='Type',
                value_name='Amount'
            )

            fig = px.bar(
                cash_flow_df_melted,
                x='month',
                y='Amount',
                color='Type',
                barmode='group',
                labels={'month': '', 'Amount': 'Amount (€)'},
                color_discrete_sequence=[ACCENT_COLOR, '#FF6B6B']
            )
            fig.update_layout(margin=dict(t=0, b=0, l=20, r=20))
            st.plotly_chart(fig, use_container_width=True)

            # AI-driven cash flow forecast
            st.markdown("<h3>Cash Flow Forecast</h3>", unsafe_allow_html=True)

            col1, col2 = st.columns([2, 1])

            with col1:
                # Generate sample forecast data
                future_dates = pd.date_range(start=datetime.now(), periods=6, freq='M')
                forecast_income = [random.uniform(2000, 2600) for _ in range(6)]
                forecast_expenses = [random.uniform(1500, 2200) for _ in range(6)]
                forecast_savings = [inc - exp for inc, exp in zip(forecast_income, forecast_expenses)]

                forecast_df = pd.DataFrame({
                    'month': future_dates.strftime('%b %Y'),
                    'Income': forecast_income,
                    'Expenses': forecast_expenses,
                    'Savings': forecast_savings
                })

                forecast_df_melted = pd.melt(
                    forecast_df,
                    id_vars=['month'],
                    value_vars=['Income', 'Expenses', 'Savings'],
                    var_name='Type',
                    value_name='Amount'
                )

                fig = px.line(
                    forecast_df_melted,
                    x='month',
                    y='Amount',
                    color='Type',
                    line_shape='spline',
                    labels={'month': '', 'Amount': 'Amount (€)'},
                    color_discrete_sequence=[ACCENT_COLOR, '#FF6B6B', PRIMARY_COLOR]
                )
                fig.update_layout(margin=dict(t=0, b=0, l=20, r=20))
                st.plotly_chart(fig, use_container_width=True)

            with col2:
                st.markdown("<h4>Safe-to-Save Amount</h4>", unsafe_allow_html=True)

                safe_to_save = forecast_df['Savings'].mean()

                st.markdown(f"""
                <div style="padding: 1rem; background-color: {PRIMARY_COLOR}; color: white; border-radius: 10px; text-align: center;">
                    <h2 style="margin: 0;">€{safe_to_save:.2f}</h2>
                    <p style="margin: 0;">Monthly Safe-to-Save</p>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("<p style='margin-top: 1rem;'>This is the amount you can safely save or invest each month based on your income and spending patterns.</p>", unsafe_allow_html=True)

                if st.button("Set Up Auto-Save"):
                    st.success(f"Auto-save set up for €{safe_to_save:.2f} per month!")
        else:
            st.warning("Upgrade to Pro or Elite to access advanced cash flow analysis and forecasting.")
            if st.button("Upgrade Subscription"):
                navigate_to("subscription")
                st.rerun()

# AI Financial Advisor
def display_advisor():
    st.markdown("<h2>AI Financial Advisor</h2>", unsafe_allow_html=True)

    if st.session_state.subscription == 'Elite':
        col1, col2 = st.columns([2, 1])

        with col1:
            st.markdown("""
            <div style="padding: 1.5rem; background-color: #f8f9fa; border-radius: 10px;">
                <p>Chat with your personal AI financial advisor. Ask questions about your finances, get advice on savings, investments, or financial planning.</p>
            </div>
            """, unsafe_allow_html=True)

            user_message = st.text_input("Ask your financial question", "")

            if user_message:
                with st.spinner("Thinking..."):
                    time.sleep(1)

                if "retirement" in user_message.lower():
                    st.markdown("""
                    <div style="padding: 1rem; background-color: white; border-radius: 10px; border: 1px solid #e0e0e0; margin-top: 1rem;">
                        <p><strong>AI Advisor:</strong> Based on your current savings rate and investment portfolio, you're on track to reach your retirement goal by age 62. However, I notice you could optimize your tax situation by increasing contributions to your retirement accounts. Would you like me to suggest specific adjustments to your investment strategy?</p>
                    </div>
                    """, unsafe_allow_html=True)
                elif "invest" in user_message.lower():
                    st.markdown("""
                    <div style="padding: 1rem; background-color: white; border-radius: 10px; border: 1px solid #e0e0e0; margin-top: 1rem;">
                        <p><strong>AI Advisor:</strong> Looking at your risk profile and financial goals, I recommend a diversified portfolio with 70% in global equity ETFs, 20% in bond ETFs, and 10% in alternative investments. Given your timeline for your house purchase goal, you might want to keep that portion in lower-risk assets to ensure capital preservation.</p>
                    </div>
                    """, unsafe_allow_html=True)
                elif "save" in user_message.lower():
                    st.markdown("""
                    <div style="padding: 1rem; background-color: white; border-radius: 10px; border: 1px solid #e0e0e0; margin-top: 1rem;">
                        <p><strong>AI Advisor:</strong> Based on your spending patterns, I see potential to increase your monthly savings by €150. Your dining and entertainment expenses are higher than similar users with your income profile. Consider using the round-up feature to automatically save small amounts with each transaction.</p>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown("""
                    <div style="padding: 1rem; background-color: white; border-radius: 10px; border: 1px solid #e0e0e0; margin-top: 1rem;">
                        <p><strong>AI Advisor:</strong> I'm analyzing your financial situation to provide personalized advice. Based on your recent transactions and savings goals, I'd recommend focusing on building your emergency fund first before increasing your investment contributions. You're currently 24% of the way to your target.</p>
                    </div>
                    """, unsafe_allow_html=True)

        with col2:
            st.markdown("<h3>Financial Health Score</h3>", unsafe_allow_html=True)

            st.markdown(f"""
            <div style="padding: 1rem; background-color: {PRIMARY_COLOR}; color: white; border-radius: 10px; text-align: center;">
                <h2 style="margin: 0;">78/100</h2>
                <p style="margin: 0;">Your Financial Health Score</p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("<h4>Score Breakdown</h4>", unsafe_allow_html=True)

            components = {
                "Savings Rate": 82,
                "Debt Management": 90,
                "Investment Strategy": 65,
                "Emergency Fund": 75
            }

            for component, score in components.items():
                st.markdown(f"""
                <div style="margin-bottom: 0.5rem;">
                    <div style="display: flex; justify-content: space-between;">
                        <span>{component}</span>
                        <span>{score}/100</span>
                    </div>
                    <div class="progress-container">
                        <div class="progress-bar" style="width: {score}%; background-color: {PRIMARY_COLOR}"></div>
                    </div>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("<h4>Improve Your Score</h4>", unsafe_allow_html=True)

            st.markdown("""
            <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px;">
                <p style="margin: 0; font-weight: 500;">Top recommendation:</p>
                <p style="margin: 0;">Increase your investment diversification by adding international exposure.</p>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.warning("The AI Financial Advisor is an Elite subscription feature.")

        st.markdown("""
        <div style="padding: 1.5rem; background-color: #f8f9fa; border-radius: 10px; margin-top: 1rem;">
            <h3 style="margin-top: 0;">Elite Subscription Benefits</h3>
            <ul>
                <li>Personal AI Financial Advisor</li>
                <li>Custom Investment Strategies</li>
                <li>Advanced Tax Optimization</li>
                <li>Unlimited Financial Goals</li>
                <li>Priority Customer Support</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        if st.button("Upgrade to Elite"):
            navigate_to("subscription")
            st.rerun()

# Goals management
def display_goals():
    st.markdown("<h2>Financial Goals</h2>", unsafe_allow_html=True)

    # Display existing goals
    for i, goal in enumerate(st.session_state.goals):
        progress = (goal["current"] / goal["target"]) * 100

        st.markdown(f"""
        <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px; margin-bottom: 1rem;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <h3 style="margin: 0;">{goal["name"]}</h3>
                <span style="font-weight: 500;">€{goal["current"]:.0f} / €{goal["target"]:.0f}</span>
            </div>
            <div class="progress-container" style="margin-top: 0.5rem;">
                <div class="progress-bar" style="width: {progress}%; background-color: {PRIMARY_COLOR}"></div>
            </div>
            <p style="margin-top: 0.5rem;">Target date: {goal["date"]}</p>
        </div>
        """, unsafe_allow_html=True)

    # Add new goal form
    st.markdown("<h3>Add New Goal</h3>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        new_goal_name = st.text_input("Goal Name", "")
        new_goal_target = st.number_input("Target Amount (€)", min_value=1.0, value=1000.0)

    with col2:
        new_goal_date = st.date_input("Target Date", value=datetime.now() + timedelta(days=365))
        new_goal_current = st.number_input("Current Amount (€)", min_value=0.0, value=0.0)

    if st.button("Add Goal"):
        if new_goal_name:
            st.session_state.goals.append({
                "name": new_goal_name,
                "target": new_goal_target,
                "current": new_goal_current,
                "date": new_goal_date.strftime("%Y-%m-%d")
            })
            st.success(f"Goal '{new_goal_name}' added successfully!")
            st.rerun()
        else:
            st.error("Please enter a goal name.")

    # AI Goal Suggestions
    if st.session_state.subscription in ['Pro', 'Elite']:
        st.markdown("<h3>AI Goal Suggestions</h3>", unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("""
            <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px; height: 100%;">
                <h4 style="margin-top: 0;">Emergency Fund</h4>
                <p>Our AI suggests you should have an emergency fund of <strong>€4,500</strong> based on your monthly expenses.</p>
                <button class="stButton">Add This Goal</button>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div style="padding: 1rem; background-color: #f8f9fa; border-radius: 10px; height: 100%;">
                <h4 style="margin-top: 0;">Retirement Savings</h4>
                <p>Based on your age and income, we recommend saving <strong>€150,000</strong> for retirement by 2050.</p>
                <button class="stButton">Add This Goal</button>
            </div>
            """, unsafe_allow_html=True)

# Subscription management
def display_subscription():
    st.markdown("<h2>Subscription Plans</h2>", unsafe_allow_html=True)

    st.markdown("<p>Choose the plan that best fits your financial needs.</p>", unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown("""
        <div class="subscription-card basic-card">
            <h3 style="margin-top: 0;">Basic</h3>
            <h2>Free</h2>
            <p>For essential financial management</p>
            <hr>
            <ul>
                <li>Basic budgeting features</li>
                <li>Transaction tracking</li>
                <li>Up to 2 financial goals</li>
                <li>Simple savings features</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        if st.session_state.subscription != "Basic":
            if st.button("Switch to Basic", key="basic_btn"):
                st.session_state.subscription = "Basic"
                st.success("You've switched to the Basic plan!")
                st.rerun()
        else:
            st.info("Your current plan")

    with col2:
        st.markdown("""
        <div class="subscription-card pro-card">
            <h3 style="margin-top: 0;">Pro</h3>
            <h2>€4.99/month</h2>
            <p>For serious financial planning</p>
            <hr>
            <ul>
                <li>All Basic features</li>
                <li>Advanced analytics</li>
                <li>Investment tracking</li>
                <li>Unlimited financial goals</li>
                <li>Custom categories</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        if st.session_state.subscription != "Pro":
            if st.button("Upgrade to Pro", key="pro_btn"):
                st.session_state.subscription = "Pro"
                st.success("You've upgraded to the Pro plan!")
                st.rerun()
        else:
            st.info("Your current plan")

    with col3:
        st.markdown("""
        <div class="subscription-card elite-card">
            <h3 style="margin-top: 0;">Elite</h3>
            <h2>€9.99/month</h2>
            <p>For comprehensive financial management</p>
            <hr>
            <ul>
                <li>All Pro features</li>
                <li>AI Financial Advisor</li>
                <li>Custom investment strategies</li>
                <li>Tax optimization</li>
                <li>Priority support</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        if st.session_state.subscription != "Elite":
            if st.button("Upgrade to Elite", key="elite_btn"):
                st.session_state.subscription = "Elite"
                st.success("You've upgraded to the Elite plan!")
                st.rerun()
        else:
            st.info("Your current plan")

# Settings component
def display_settings():
    st.markdown("<h2>Account Settings</h2>", unsafe_allow_html=True)

    tab1, tab2, tab3 = st.tabs(["Profile", "Preferences", "Notifications"])

    with tab1:
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("<h3>Personal Information</h3>", unsafe_allow_html=True)

            st.text_input("Full Name", "John Doe")
            st.text_input("Email", "john.doe@example.com")
            st.text_input("Phone", "+1234567890")

            if st.button("Update Profile"):
                st.success("Profile updated successfully!")

        with col2:
            st.markdown("<h3>Security</h3>", unsafe_allow_html=True)

            st.text_input("Current Password", type="password")
            st.text_input("New Password", type="password")
            st.text_input("Confirm New Password", type="password")

            if st.button("Change Password"):
                st.success("Password changed successfully!")

    with tab2:
        st.markdown("<h3>App Preferences</h3>", unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            st.selectbox("Default Currency", ["EUR (€)", "USD ($)", "GBP (£)", "JPY (¥)"])
            st.selectbox("Date Format", ["DD/MM/YYYY", "MM/DD/YYYY", "YYYY-MM-DD"])

        with col2:
            st.selectbox("First Day of Week", ["Monday", "Sunday"])
            st.selectbox("Language", ["English", "French", "German", "Spanish"])

        st.checkbox("Dark Mode")

        if st.button("Save Preferences"):
            st.success("Preferences saved successfully!")

    with tab3:
        st.markdown("<h3>Notification Settings</h3>", unsafe_allow_html=True)

        st.checkbox("Email Notifications", value=True)
        st.checkbox("Push Notifications", value=True)
        st.checkbox("SMS Notifications", value=False)

        st.markdown("<h4>Notify me about:</h4>", unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            st.checkbox("Large transactions", value=True)
            st.checkbox("Low balance", value=True)
            st.checkbox("Goal progress", value=True)

        with col2:
            st.checkbox("New features", value=True)
            st.checkbox("Tips & insights", value=True)
            st.checkbox("Special offers", value=False)

        if st.button("Save Notification Settings"):
            st.success("Notification settings saved successfully!")

# Main application logic
def main():
    # Sidebar navigation
    if st.session_state.login_status:
        with st.sidebar:
            st.markdown(f"""
            <div style="padding: 1rem; text-align: center;">
                <h2 style="margin: 0; color: {PRIMARY_COLOR};">neuro</h2>
                <p style="margin: 0;">AI-powered financial companion</p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("<h3>Navigation</h3>", unsafe_allow_html=True)

            if st.button("🏠 Dashboard"):
                navigate_to("dashboard")
                st.rerun()

            if st.button("💰 Savings & Investments"):
                navigate_to("savings")
                st.rerun()

            if st.button("📊 Transactions & Analysis"):
                navigate_to("transactions")
                st.rerun()

            if st.button("🎯 Financial Goals"):
                navigate_to("goals")
                st.rerun()

            if st.button("🤖 AI Financial Advisor"):
                navigate_to("advisor")
                st.rerun()

            st.markdown("<hr>", unsafe_allow_html=True)

            if st.button("⚙️ Settings"):
                navigate_to("settings")
                st.rerun()

            if st.button("💎 Subscription"):
                navigate_to("subscription")
                st.rerun()

            st.markdown("<hr>", unsafe_allow_html=True)

            st.markdown(f"""
            <div style="padding: 0.5rem; background-color: #f8f9fa; border-radius: 5px; text-align: center;">
                <p style="margin: 0; font-size: 0.9rem;">Current Plan: <strong>{st.session_state.subscription}</strong></p>
            </div>
            """, unsafe_allow_html=True)

            if st.button("Logout"):
                st.session_state.login_status = False
                st.session_state.current_page = "login"
                st.rerun()

        # Main content based on current page
        if st.session_state.current_page == "dashboard":
            display_dashboard()
        elif st.session_state.current_page == "savings":
            display_savings()
        elif st.session_state.current_page == "transactions":
            display_transactions()
        elif st.session_state.current_page == "goals":
            display_goals()
        elif st.session_state.current_page == "advisor":
            display_advisor()
        elif st.session_state.current_page == "settings":
            display_settings()
        elif st.session_state.current_page == "subscription":
            display_subscription()
    else:
        login()

if __name__ == "__main__":
    main()